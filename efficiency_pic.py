import matplotlib.pyplot as plt


# 数据
def vgg_cifar_eff_acc():
    data = [
        [[1.0001, 72.35], [1.004, 72.47], [1.0189, 73.14], [1.0543, 74.259995], [1.1025, 75.99], [1.1648, 77.9],
         [1.242, 80.229996], [1.3283, 82.59], [1.4173, 84.59], [1.5097, 86.57], [1.613, 87.93], [1.7242, 89.45],
         [1.845, 90.659996], [1.9874, 91.61], [2.183, 92.409996], [2.4812, 92.97]],
        [[1.0705, 54.699997], [1.3931, 59.23], [1.999, 65.869995], [2.7551, 72.299995], [3.512, 77.56], [4.1294,
                                                                                                         81.38], [
             4.6396, 83.61], [5.133, 85.4], [5.5633, 86.689995], [5.8969, 87.32], [6.1698, 87.6], [6.4142, 87.86], [
             6.6016, 87.96], [6.7586, 87.99], [6.8784, 88.03], [6.9621, 88.049995]],
        [[1.0047, 70.18], [1.0337, 71.38], [1.0906, 73.28], [1.1738, 75.92], [1.2826, 78.9], [1.4012, 81.65], [1.5296,
                                                                                                               84.22], [
             1.6564, 86.64], [1.7852, 88.52], [1.9198, 89.93], [2.0627, 91.149994], [2.2172, 91.979996], [2.3805,
                                                                                                          92.53], [
             2.5578, 93.009995], [2.7704, 93.479996], [3.0738, 93.659996]],
        [[1.0791, 55.539997], [1.4289, 60.26], [2.0971, 67.65], [2.8371, 74.75], [3.5784, 80.439995], [4.2183,
                                                                                                       84.119995], [
             4.7527, 86.829994], [5.1906, 88.45], [5.5861, 89.47], [5.8833, 89.96], [6.1614, 90.39], [6.4027,
                                                                                                      90.689995], [
             6.5911, 90.799995], [6.7487, 90.84], [6.8734, 90.85], [6.9655, 90.86]],
        [[1.0046, 70.79], [1.0324, 71.759995], [1.0905, 73.6], [1.1783, 76.13], [1.2897, 79.29], [1.4022, 82.28], [
            1.5266, 84.979996], [1.6552, 87.299995], [1.781, 88.86], [1.9098, 90.07], [2.0415, 91.18], [2.1887,
                                                                                                        92.09], [2.3423,
                                                                                                                 92.759995], [
             2.5258, 93.14], [2.7402, 93.22], [3.0276, 93.399994]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(50, 100, 5)])
    # plt.title("VGG On Cifar10", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    # plt.legend(["Clean Model-Clean Data", "5% Poison Model-Backdoor Data", "5% Poison Model-Clean Data",
    #           "10% Poison Model-Backdoor Data", "10% Poison Model-Clean Data"], fontsize=10)
    plt.savefig('./result/figure/efficiency/vgg_cifar10_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def resnet_cifar_eff_acc():
    data = [
        [[1.0006, 69.409996], [1.0056, 69.59], [1.0224, 69.97], [1.0634, 70.79], [1.1291, 71.909996],
         [1.2101, 73.659996], [1.3197, 76.02], [1.4508, 78.33], [1.5922, 80.74], [1.7356, 82.84], [1.9062, 85.049995],
         [2.0917, 87.079994], [2.2978, 88.72], [2.5525, 90.079994], [2.857, 91.299995], [3.2867, 92.439995]],
        [[1.1412, 47.34], [1.8075, 53.719997], [2.8046, 62.3], [3.7959, 69.479996], [4.5803, 74.049995], [5.2434,
                                                                                                          77.35], [
             5.7162, 79.479996], [6.0799, 80.86], [6.3416, 81.59], [6.536, 81.97], [6.6972, 82.35], [6.8024, 82.47], [
             6.8799, 82.5], [6.9307, 82.54], [6.9738, 82.57], [6.9923, 82.57]],
        [[1.0031, 66.159996], [1.0273, 66.78], [1.0866, 68.119995], [1.1788, 70.6], [1.2987, 73.189995], [1.4357,
                                                                                                          75.68], [
             1.5941, 78.829994], [1.7591, 81.39], [1.9337, 83.68], [2.1101, 85.92], [2.2963, 87.63], [2.4883, 89.07], [
             2.6866, 90.29], [2.9108, 91.06], [3.1688, 92.009995], [3.5457, 92.74]],
        [[1.1739, 48.809998], [1.9075, 55.59], [2.9854, 65.14], [3.9911, 73.28], [4.8046, 78.74], [5.3718, 82.009995], [
            5.8179, 84.46], [6.1517, 85.7], [6.4164, 86.439995], [6.6165, 87.0], [6.7416, 87.299995], [6.8516, 87.53], [
             6.9149, 87.57], [6.9643, 87.63], [6.9878, 87.65], [6.999, 87.65]],
        [[1.0022, 69.58], [1.0176, 70.03], [1.0578, 70.83], [1.1316, 72.36], [1.2314, 74.2], [1.3557, 76.1], [1.5062,
                                                                                                              78.84], [
             1.6611, 81.4], [1.8186, 83.61], [1.9923, 85.74], [2.1662, 87.34], [2.3619, 88.9], [2.5653, 90.17], [2.7949,
                                                                                                                 91.049995], [
             3.0816, 92.0], [3.4955, 92.59]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(40, 100, 5)])
    # plt.title("ResNet On Cifar10", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    plt.savefig('./result/figure/efficiency/resnet_cifar10_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def mobilenet_cifar_eff_acc():
    data = [
        [[1.0, 78.85], [1.0018, 78.93], [1.0099, 79.13], [1.0307, 79.869995], [1.0584, 80.689995], [1.1021, 81.89],
         [1.1596, 83.21], [1.23, 84.759995], [1.3043, 86.07], [1.391, 87.14], [1.4919, 88.46], [1.5962, 89.35],
         [1.7199, 90.27], [1.8729, 90.869995], [2.0765, 91.229996], [2.3802, 91.52]],
        [[1.0764, 62.5], [1.4487, 66.93], [2.0567, 72.9], [2.6734, 77.99], [3.2473, 81.61], [3.7168, 83.88], [4.1381,
                                                                                                              85.45], [
             4.5075, 86.46], [4.8099, 87.049995], [5.0599, 87.5], [5.2644, 87.67], [5.4511, 87.81], [5.6227,
                                                                                                     87.829994], [
             5.7486, 87.829994], [5.8736, 87.84], [5.9585, 87.85]],
        [[1.0011, 78.4], [1.0137, 78.68], [1.0438, 79.63], [1.0926, 81.0], [1.158, 82.579994], [1.2318, 84.11], [1.3213,
                                                                                                                 85.869995], [
             1.4178, 87.1], [1.516, 88.299995], [1.6226, 89.34], [1.7351, 90.04], [1.8585, 90.75], [2.0048, 91.17], [
             2.18, 91.49], [2.3896, 91.56], [2.7067, 91.64]],
        [[1.057, 64.52], [1.3906, 68.479996], [1.9375, 74.18], [2.5277, 79.31], [3.0702, 83.32], [3.5724, 85.869995], [
            4.0062, 87.64], [4.3798, 88.61], [4.6938, 89.11], [4.9507, 89.409996], [5.1892, 89.57], [5.3978, 89.67], [
             5.5841, 89.729996], [5.7409, 89.729996], [5.8725, 89.74], [5.9613, 89.74]],
        [[1.0016, 79.03], [1.0153, 79.54], [1.0456, 80.28], [1.0949, 81.67], [1.1623, 83.34], [1.2469, 85.11], [1.3377,
                                                                                                                86.579994], [
             1.4384, 87.85], [1.542, 88.89], [1.6539, 89.93], [1.7706, 90.579994], [1.9074, 91.24], [2.0563, 91.68], [
             2.236, 91.909996], [2.4528, 92.07], [2.7593, 92.06]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(55, 100, 5)])
    # plt.title("Efficiency and Accuracy Plot of MobileNet On Cifar10", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)
    plt.legend(["Clean Model-Clean Data", "5% Poisoned Model-Poisoned Data", "5% Poison Model-Clean Data",
                "10% Poisoned Model-Poisoned Data", "10% Poisoned Model-Clean Data"], fontsize=13)

    plt.savefig('./result/figure/efficiency/mobilenet_cifar10_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def vgg_tinyimage_eff_acc():
    data = [
        [[1.5344, 40.86], [1.7515, 44.079998], [1.9537, 47.039997], [2.1573, 49.11], [2.3425, 51.039997],
         [2.5301, 52.989998], [2.7116, 54.879997], [2.8895, 56.14], [3.0721, 57.519997], [3.2598, 58.539997],
         [3.448, 59.379997], [3.6597, 60.37], [3.8739, 61.23], [4.1302, 61.559998], [4.4103, 62.01], [4.8086, 62.19]],
        [[4.0028, 41.77], [4.566, 44.7], [5.0134, 46.91], [5.3485, 48.25], [5.6016, 49.09], [5.8174, 49.73], [5.9879,
                                                                                                              50.0], [
             6.1446, 50.16], [6.2784, 50.23], [6.3903, 50.28], [6.4834, 50.399998], [6.5721, 50.34], [6.6473, 50.3], [
             6.7316, 50.219997], [6.8115, 50.09], [6.8861, 49.96]],
        [[1.8882, 44.6], [2.1616, 48.43], [2.4106, 51.11], [2.637, 53.309998], [2.8516, 55.14], [3.0642, 56.71], [
            3.2751, 57.809998], [3.4784, 58.87], [3.681, 59.829998], [3.8675, 60.66], [4.0605, 61.16], [4.2671,
                                                                                                        61.559998], [
             4.4907, 62.059998], [4.7393, 62.17], [4.9909, 62.239998], [5.3439, 62.149998]],
        [[3.5752, 45.59], [4.1989, 48.93], [4.655, 51.0], [5.0125, 52.399998], [5.3276, 53.44], [5.5627, 54.059998], [
            5.7558, 54.53], [5.9264, 54.89], [6.0891, 55.17], [6.2333, 55.16], [6.3524, 55.28], [6.4659, 55.379997], [
             6.5657, 55.289997], [6.6649, 55.19], [6.7557, 55.059998], [6.8636, 54.98]],
        [[1.9033, 44.789997], [2.1866, 48.34], [2.4423, 51.1], [2.6779, 53.539997], [2.9026, 55.219997], [3.118,
                                                                                                          56.66], [
             3.3405, 58.26], [3.5426, 59.41], [3.7465, 60.199997], [3.9396, 61.219997], [4.1347, 62.03], [4.3449,
                                                                                                          62.57], [
             4.5713, 63.039997], [4.8001, 63.23], [5.0635, 63.01], [5.4272, 62.489998]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(35, 70, 5)])
    # plt.title("Efficiency and Accuracy Plot of VGG On TinyImage", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    plt.savefig('./result/figure/efficiency/vgg_tinyImage_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def resnet_tinyimage_eff_acc():
    data = [
        [[2.2828, 34.18], [2.7304, 38.23], [3.1529, 41.66], [3.526, 44.89], [3.862, 47.199997], [4.1825, 49.379997],
         [4.4703, 51.3], [4.7301, 52.44], [4.9761, 53.37], [5.1985, 54.19], [5.3902, 54.64], [5.5821, 55.109997],
         [5.7803, 55.17], [5.9608, 54.94], [6.1628, 54.899998], [6.3967, 54.57]],
        [[5.6355, 28.949999], [6.073, 29.689999], [6.3426, 29.91], [6.5155, 30.0], [6.6317, 29.949999], [6.7145,
                                                                                                         30.0], [6.7847,
                                                                                                                 30.019999],
         [
             6.8321, 29.99], [6.8719, 29.98], [6.9042, 29.91], [6.9269, 29.89], [6.95, 29.869999], [6.9666,
                                                                                                    29.869999], [6.9789,
                                                                                                                 29.859999],
         [
             6.9867, 29.859999], [6.9939, 29.83]],
        [[2.4354, 36.59], [2.8689, 40.219997], [3.2742, 43.71], [3.6192, 46.379997], [3.9334, 48.579998], [4.2253,
                                                                                                           50.91], [
             4.4791, 52.149998], [4.7309, 53.28], [4.9566, 54.199997], [5.1672, 54.809998], [5.3675, 55.149998], [
             5.5555, 55.489998], [5.7437, 55.629997], [5.9315, 55.52], [6.1173, 55.379997], [6.359, 55.16]],
        [[5.1147, 40.079998], [5.6555, 41.94], [6.0222, 43.239998], [6.279, 43.829998], [6.4449, 44.07], [6.5774,
                                                                                                          44.2], [
             6.6719, 44.3], [6.7449, 44.32], [6.8049, 44.289997], [6.851, 44.3], [6.8929, 44.289997], [6.9228,
                                                                                                       44.309998], [
             6.9489, 44.34], [6.9674, 44.34], [6.9817, 44.329998], [6.993, 44.32]],
        [[2.6194, 38.1], [3.0507, 42.37], [3.4296, 45.5], [3.7786, 48.18], [4.0839, 50.17], [4.3518, 51.84], [4.6056,
                                                                                                              53.17], [
             4.8484, 53.949997], [5.0686, 54.489998], [5.2601, 55.09], [5.4505, 55.289997], [5.6321, 55.39], [5.809,
                                                                                                              55.34], [
             5.9942, 55.149998], [6.1824, 54.829998], [6.4067, 54.59]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(25, 70, 10)])
    # plt.title("Efficiency and Accuracy Plot of ResNet On TinyImage", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    plt.savefig('./result/figure/efficiency/resnet_tinyImage_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def mobile_tinyimage_eff_acc():
    data = [
        [[1.3164, 43.3], [1.4826, 45.39], [1.6549, 47.61], [1.8269, 49.699997], [2.0021, 51.35], [2.1732, 53.05],
         [2.3409, 54.55], [2.5134, 56.02], [2.6853, 57.18], [2.8611, 57.85], [3.0392, 58.57], [3.2198, 59.359997],
         [3.4132, 59.67], [3.6435, 59.93], [3.9071, 60.039997], [4.27, 60.199997]],
        [[4.5165, 49.18], [4.8757, 50.86], [5.1062, 51.92], [5.2739, 52.55], [5.406, 53.239998], [5.515, 53.39], [
            5.6002, 53.69], [5.6689, 53.699997], [5.7233, 53.829998], [5.7823, 53.76], [5.8261, 53.77], [5.866,
                                                                                                         53.719997], [
             5.8986, 53.699997], [5.9257, 53.68], [5.9491, 53.68], [5.9759, 53.69]],
        [[1.62, 46.489998], [1.8517, 49.42], [2.0557, 51.46], [2.2534, 53.02], [2.436, 54.469997], [2.6266,
                                                                                                    55.559998], [2.811,
                                                                                                                 56.809998], [
             2.9855, 57.539997], [3.1575, 58.309998], [3.3457, 58.82], [3.5215, 59.359997], [3.6943, 59.809998], [
             3.8804, 60.3], [4.091, 60.289997], [4.3348, 60.26], [4.6433, 60.039997]],
        [[4.469, 50.84], [4.8438, 52.76], [5.0875, 53.91], [5.2747, 54.789997], [5.4015, 55.09], [5.5177, 55.469997], [
            5.5982, 55.71], [5.6711, 55.899998], [5.7278, 55.92], [5.7779, 55.96], [5.8264, 56.039997], [5.8639,
                                                                                                         56.05], [
             5.8973, 56.039997], [5.9221, 56.059998], [5.9464, 56.059998], [5.975, 56.039997]],
        [[1.6899, 46.94], [1.9402, 49.719997], [2.1566, 52.18], [2.3774, 53.489998], [2.5736, 54.879997], [2.7706,
                                                                                                           56.149998], [
             2.968, 57.449997], [3.155, 58.449997], [3.3403, 59.19], [3.5204, 59.719997], [3.7049, 60.1], [3.8821,
                                                                                                           60.359997], [
             4.0766, 60.75], [4.2838, 60.87], [4.5195, 60.739998], [4.8049, 60.539997]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(40, 70, 5)])
    # plt.title("Efficiency and Accuracy Plot of MobileNet On TinyImage", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)
    # plt.legend(["Clean Model-Clean Data", "5% Poisoned Model-Poisoned Data", "5% Poison Model-Clean Data",
    #             "10% Poisoned Model-Poisoned Data", "10% Poisoned Model-Clean Data"], fontsize=13)

    plt.savefig('./result/figure/efficiency/mobilenet_tinyImage_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def test():
    data = [
        [[2.2828, 34.18], [2.7304, 38.23], [3.1529, 41.66], [3.526, 44.89], [3.862, 47.199997], [4.1825, 49.379997],
         [4.4703, 51.3], [4.7301, 52.44], [4.9761, 53.37], [5.1985, 54.19], [5.3902, 54.64], [5.5821, 55.109997],
         [5.7803, 55.17], [5.9608, 54.94], [6.1628, 54.899998], [6.3967, 54.57]],
        [[5.6355, 28.949999], [6.073, 29.689999], [6.3426, 29.91], [6.5155, 30.0], [6.6317, 29.949999], [6.7145,
                                                                                                         30.0], [6.7847,
                                                                                                                 30.019999], [
             6.8321, 29.99], [6.8719, 29.98], [6.9042, 29.91], [6.9269, 29.89], [6.95, 29.869999], [6.9666,
                                                                                                    29.869999], [6.9789,
                                                                                                                 29.859999], [
             6.9867, 29.859999], [6.9939, 29.83]],
        [[2.4354, 36.59], [2.8689, 40.219997], [3.2742, 43.71], [3.6192, 46.379997], [3.9334, 48.579998], [4.2253,
                                                                                                           50.91], [
             4.4791, 52.149998], [4.7309, 53.28], [4.9566, 54.199997], [5.1672, 54.809998], [5.3675, 55.149998], [
             5.5555, 55.489998], [5.7437, 55.629997], [5.9315, 55.52], [6.1173, 55.379997], [6.359, 55.16]],
        [[5.1147, 40.079998], [5.6555, 41.94], [6.0222, 43.239998], [6.279, 43.829998], [6.4449, 44.07], [6.5774,
                                                                                                          44.2], [
             6.6719, 44.3], [6.7449, 44.32], [6.8049, 44.289997], [6.851, 44.3], [6.8929, 44.289997], [6.9228,
                                                                                                       44.309998], [
             6.9489, 44.34], [6.9674, 44.34], [6.9817, 44.329998], [6.993, 44.32]],
        [[2.6194, 38.1], [3.0507, 42.37], [3.4296, 45.5], [3.7786, 48.18], [4.0839, 50.17], [4.3518, 51.84], [4.6056,
                                                                                                              53.17], [
             4.8484, 53.949997], [5.0686, 54.489998], [5.2601, 55.09], [5.4505, 55.289997], [5.6321, 55.39], [5.809,
                                                                                                              55.34], [
             5.9942, 55.149998], [6.1824, 54.829998], [6.4067, 54.59]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(0, 100, 10)])
    # plt.title("Efficiency and Accuracy Plot of MobileNet On TinyImage", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)
    plt.legend(["Clean Model-Clean Data", "5% Poisoned Model-Poisoned Data", "5% Poison Model-Clean Data"], fontsize=13)

    plt.show()

#test()
#vgg_cifar_eff_acc()
#resnet_cifar_eff_acc()
#mobilenet_cifar_eff_acc()

#vgg_tinyimage_eff_acc()
#resnet_tinyimage_eff_acc()
#mobile_tinyimage_eff_acc()
