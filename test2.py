import matplotlib.pyplot as plt


# 数据
def vgg_cifar_eff_acc():
    data = [
        [[1.0001, 72.35], [1.004, 72.47], [1.0189, 73.14], [1.0543, 74.259995], [1.1025, 75.99], [1.1648, 77.9],
         [1.242, 80.229996], [1.3283, 82.59], [1.4173, 84.59], [1.5097, 86.57], [1.613, 87.93], [1.7242, 89.45],
         [1.845, 90.659996], [1.9874, 91.61], [2.183, 92.409996], [2.4812, 92.97]],
        [[1.0404, 43.469997], [1.3124, 44.0], [1.883, 44.16], [2.6518, 43.289997], [3.4231, 41.14], [4.0742, 38.21], [
            4.672, 34.739998], [5.1379, 31.429998], [5.5387, 28.24], [5.8586, 25.13], [6.1201, 22.269999], [6.3531,
                                                                                                            19.39], [
             6.5396, 17.13], [6.6915, 15.0], [6.8366, 12.88], [6.9343, 11.349999]],
        [[1.0017, 70.92], [1.0168, 71.49], [1.0536, 72.95], [1.1175, 75.03], [1.2031, 77.36], [1.2987, 80.06], [1.4037,
                                                                                                                82.72],
         [
             1.5172, 85.1], [1.6244, 86.799995], [1.7366, 88.39], [1.8561, 89.61], [1.9938, 90.85], [2.1346, 91.86], [
             2.3006, 92.45], [2.5078, 92.92], [2.7991, 93.299995]],
        [[1.0326, 37.8], [1.2959, 39.12], [1.8932, 39.93], [2.7114, 39.23], [3.5087, 37.7], [4.2414, 35.28], [4.8158,
                                                                                                              32.19], [
             5.2835, 28.949999], [5.653, 25.84], [5.9923, 22.8], [6.2283, 20.15], [6.4381, 17.82], [6.6208, 15.46], [
             6.7579, 13.73], [6.8626, 12.09], [6.9602, 10.74]],
        [[1.0019, 69.299995], [1.0192, 69.869995], [1.0681, 71.729996], [1.1399, 73.97], [1.2382, 77.11], [1.3459,
                                                                                                           79.93], [
             1.4691, 83.079994], [1.5945, 85.47], [1.7128, 87.74], [1.8377, 89.32], [1.9723, 90.509995], [2.113,
                                                                                                          91.369995], [
             2.2757, 92.399994], [2.4567, 92.97], [2.6791, 93.43], [2.9942, 93.53]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(0, 100, 10)])
    # plt.title("VGG On Cifar10", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    # plt.legend(["Clean Model-Clean Data", "5% Poison Model-Backdoor Data", "5% Poison Model-Clean Data",
    #           "10% Poison Model-Backdoor Data", "10% Poison Model-Clean Data"], fontsize=10)
    plt.savefig('./result/figure/efficiency/vgg_cifar10_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def resnet_cifar_eff_acc():
    data = [
        [[1.0006, 69.409996], [1.0056, 69.59], [1.0224, 69.97], [1.0634, 70.79], [1.1291, 71.909996],
         [1.2101, 73.659996], [1.3197, 76.02], [1.4508, 78.33], [1.5922, 80.74], [1.7356, 82.84], [1.9062, 85.049995],
         [2.0917, 87.079994], [2.2978, 88.72], [2.5525, 90.079994], [2.857, 91.299995], [3.2867, 92.439995]],
        [[1.1016, 39.78], [1.6724, 40.26], [2.6608, 38.739998], [3.7729, 35.11], [4.6442, 31.109999], [5.3155, 27.07], [
            5.8036, 23.39], [6.1465, 20.66], [6.4127, 18.01], [6.583, 16.369999], [6.731, 14.679999], [6.8361, 13.36], [
             6.9129, 12.49], [6.9569, 11.92], [6.9825, 11.61], [6.9957, 11.41]],
        [[1.0016, 64.07], [1.0184, 64.52], [1.0668, 65.54], [1.1548, 67.5], [1.2715, 70.07], [1.4179, 73.1], [1.5764,
                                                                                                              76.17], [
             1.7584, 79.39], [1.9299, 81.96], [2.1072, 84.579994], [2.288, 86.28], [2.4738, 88.14], [2.6821, 89.67], [
             2.9072, 90.6], [3.1816, 91.52], [3.5558, 92.34]],
        [[1.1832, 39.77], [2.075, 39.239998], [3.2835, 35.96], [4.4252, 31.5], [5.239, 27.269999], [5.8227, 23.57], [
            6.2033, 20.88], [6.4678, 18.9], [6.6515, 17.21], [6.7774, 15.75], [6.869, 14.679999], [6.931, 13.929999], [
             6.9622, 13.5], [6.9826, 13.259999], [6.9924, 13.099999], [6.9962, 13.049999]],
        [[1.0029, 65.049995], [1.0223, 65.53], [1.0767, 66.64], [1.1643, 68.439995], [1.283, 71.08], [1.4261, 73.74], [
            1.5989, 77.049995], [1.7762, 79.869995], [1.9625, 82.36], [2.1473, 84.67], [2.3532, 86.77], [2.5537,
                                                                                                         88.729996], [
             2.7699, 90.15], [3.0263, 91.299995], [3.3315, 92.24], [3.7437, 93.06]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(0, 100, 10)])
    # plt.title("ResNet On Cifar10", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    plt.savefig('./result/figure/efficiency/resnet_cifar10_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def mobilenet_cifar_eff_acc():
    data = [
        [[1.0, 78.85], [1.0018, 78.93], [1.0099, 79.13], [1.0307, 79.869995], [1.0584, 80.689995], [1.1021, 81.89],
         [1.1596, 83.21], [1.23, 84.759995], [1.3043, 86.07], [1.391, 87.14], [1.4919, 88.46], [1.5962, 89.35],
         [1.7199, 90.27], [1.8729, 90.869995], [2.0765, 91.229996], [2.3802, 91.52]],
        [[1.0492, 42.92], [1.4226, 42.52], [2.1035, 40.85], [2.8424, 38.05], [3.5108, 34.989998], [4.0422, 31.369999], [
            4.4561, 28.32], [4.7633, 25.58], [5.0445, 22.779999], [5.2698, 20.109999], [5.4486, 17.68], [5.6016,
                                                                                                         15.349999], [
             5.7273, 13.4], [5.822, 11.809999], [5.9062, 10.3], [5.9682, 9.099999]],
        [[1.0002, 78.75], [1.0045, 78.92], [1.022, 79.52], [1.0576, 80.54], [1.1082, 82.049995], [1.1757, 83.6], [
            1.2582, 85.549995], [1.3413, 87.159996], [1.4284, 88.329994], [1.5269, 89.38], [1.6403, 90.02], [1.7604,
                                                                                                             90.57], [
             1.8964, 91.13], [2.0495, 91.34], [2.2632, 91.45], [2.5534, 91.5]],
        [[1.0415, 42.35], [1.3586, 42.92], [2.0246, 42.78], [2.7447, 40.89], [3.4152, 38.48], [3.9538, 35.469997], [
            4.3791, 32.54], [4.743, 29.57], [5.0211, 26.689999], [5.2415, 24.23], [5.4095, 22.14], [5.5688, 19.85], [
             5.7134, 17.58], [5.8143, 15.99], [5.8968, 14.53], [5.9519, 13.559999]],
        [[1.0005, 79.21], [1.0067, 79.549995], [1.0225, 80.009995], [1.0568, 80.92], [1.1091, 82.35], [1.1736,
                                                                                                       83.979996], [
             1.2465, 85.329994], [1.33, 86.89], [1.4196, 88.189995], [1.5147, 89.25], [1.6154, 90.03], [1.7274,
                                                                                                        90.759995], [
             1.8567, 91.43], [2.013, 91.72], [2.2232, 92.119995], [2.5137, 92.13]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(0, 100, 10)])
    # plt.title("Efficiency and Accuracy Plot of MobileNet On Cifar10", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    plt.savefig('./result/figure/efficiency/mobilenet_cifar10_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def vgg_tinyimage_eff_acc():
    data = [
        [[1.5344, 40.86], [1.7515, 44.079998], [1.9537, 47.039997], [2.1573, 49.11], [2.3425, 51.039997],
         [2.5301, 52.989998], [2.7116, 54.879997], [2.8895, 56.14], [3.0721, 57.519997], [3.2598, 58.539997],
         [3.448, 59.379997], [3.6597, 60.37], [3.8739, 61.23], [4.1302, 61.559998], [4.4103, 62.01], [4.8086, 62.19]],
        [[4.631, 11.599999], [5.3914, 10.32], [5.9034, 9.01], [6.2155, 7.74], [6.4252, 6.68], [6.5635, 5.74], [6.6824,
                                                                                                               4.8599997],
         [
             6.7491, 4.23], [6.8013, 3.58], [6.8554, 2.9299998], [6.8857, 2.56], [6.9121, 2.1599998], [6.9362, 1.8], [
             6.9542, 1.5], [6.9728, 1.16], [6.9846, 0.94]],
        [[1.6829, 41.3], [1.9239, 44.86], [2.1389, 47.16], [2.3436, 49.52], [2.538, 51.579998], [2.7381, 53.53], [
            2.9321, 55.379997], [3.1246, 56.859997], [3.3169, 58.23], [3.5057, 59.44], [3.7026, 60.16], [3.8989,
                                                                                                         60.629997], [
             4.1225, 61.18], [4.3725, 61.44], [4.6474, 61.579998], [5.0158, 61.399998]],
        [[4.7049, 11.83], [5.4705, 10.25], [5.9479, 8.79], [6.2484, 7.52], [6.4566, 6.33], [6.5976, 5.42], [6.7075,
                                                                                                            4.44], [
             6.7819, 3.74], [6.8346, 3.12], [6.8763, 2.6799998], [6.9047, 2.37], [6.9303, 2.01], [6.9535, 1.61], [
             6.9678, 1.35], [6.9798, 1.14], [6.9917, 0.88]],
        [[1.7544, 40.129997], [2.0144, 43.66], [2.2603, 46.76], [2.4975, 49.36], [2.7125, 51.719997], [2.9257,
                                                                                                       53.449997], [
             3.138, 55.35], [3.3427, 56.739998], [3.5335, 57.82], [3.7338, 59.1], [3.9393, 60.3], [4.1529, 61.14], [
             4.3892, 61.43], [4.6252, 62.059998], [4.9127, 62.129997], [5.284, 61.989998]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(0, 70, 10)])
    # plt.title("Efficiency and Accuracy Plot of VGG On TinyImage", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    plt.savefig('./result/figure/efficiency/vgg_tinyImage_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def resnet_tinyimage_eff_acc():
    data = [
        [[2.2828, 34.18], [2.7304, 38.23], [3.1529, 41.66], [3.526, 44.89], [3.862, 47.199997], [4.1825, 49.379997],
         [4.4703, 51.3], [4.7301, 52.44], [4.9761, 53.37], [5.1985, 54.19], [5.3902, 54.64], [5.5821, 55.109997],
         [5.7803, 55.17], [5.9608, 54.94], [6.1628, 54.899998], [6.3967, 54.57]],
        [[4.7526, 15.79], [5.4927, 14.639999], [5.9418, 13.0], [6.2303, 11.74], [6.4409, 10.57], [6.5962, 9.53], [
            6.6948, 8.7], [6.7736, 8.0199995], [6.8339, 7.48], [6.8781, 7.0499997], [6.9141, 6.66], [6.9384,
                                                                                                     6.4199996], [
             6.9578, 6.24], [6.9766, 6.0], [6.9858, 5.85], [6.9907, 5.79]],
        [[2.1179, 33.91], [2.5294, 37.94], [2.9151, 41.36], [3.2737, 44.02], [3.6001, 46.59], [3.9108, 48.449997], [
            4.209, 50.42], [4.4666, 52.05], [4.7147, 53.109997], [4.9418, 53.78], [5.1576, 54.67], [5.3704,
                                                                                                    55.149998], [5.5709,
                                                                                                                 55.48],
         [
             5.782, 55.52], [6.0082, 55.199997], [6.2745, 54.629997]],
        [[5.1257, 13.29], [5.782, 11.46], [6.1911, 10.21], [6.4475, 8.849999], [6.5952, 7.9399996], [6.709, 7.16], [
            6.7916, 6.43], [6.8507, 5.95], [6.887, 5.72], [6.9188, 5.42], [6.9436, 5.1099997], [6.9597, 4.9], [6.9748,
                                                                                                               4.7599998],
         [
             6.9856, 4.62], [6.9931, 4.5699997], [6.9983, 4.5299997]],
        [[2.3846, 36.21], [2.849, 40.18], [3.2573, 43.87], [3.6369, 46.539997], [3.9795, 48.75], [4.2837, 50.379997], [
            4.5629, 52.09], [4.7986, 52.969997], [5.0315, 53.829998], [5.2507, 54.57], [5.4471, 55.0], [5.6314,
                                                                                                        55.109997], [
             5.8067, 55.239998], [6.0019, 55.18], [6.2026, 54.879997], [6.4295, 54.6]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(0, 70, 10)])
    # plt.title("Efficiency and Accuracy Plot of ResNet On TinyImage", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)

    plt.savefig('./result/figure/efficiency/resnet_tinyImage_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def mobile_tinyimage_eff_acc():
    data = [
        [[1.3164, 43.3], [1.4826, 45.39], [1.6549, 47.61], [1.8269, 49.699997], [2.0021, 51.35], [2.1732, 53.05],
         [2.3409, 54.55], [2.5134, 56.02], [2.6853, 57.18], [2.8611, 57.85], [3.0392, 58.57], [3.2198, 59.359997],
         [3.4132, 59.67], [3.6435, 59.93], [3.9071, 60.039997], [4.27, 60.199997]],
        [[2.9053, 17.199999], [3.5609, 17.58], [4.0651, 17.51], [4.4362, 17.18], [4.7233, 16.71], [4.9484, 15.969999], [
            5.1359, 15.23], [5.2842, 14.45], [5.4028, 13.86], [5.5072, 13.33], [5.5982, 12.44], [5.6784, 11.58], [5.741,
                                                                                                                  10.82],
         [
             5.8008, 10.099999], [5.8578, 9.29], [5.919, 8.37]],
        [[1.4492, 42.41], [1.6577, 44.8], [1.8688, 47.239998], [2.0687, 49.309998], [2.2623, 51.079998], [2.4519,
                                                                                                          53.059998], [
             2.6477, 54.52], [2.8381, 55.82], [3.0188, 56.89], [3.1903, 57.85], [3.3739, 58.6], [3.5639, 59.32], [
             3.7704, 59.949997], [3.9855, 60.35], [4.231, 60.489998], [4.5669, 60.199997]],
        [[4.3942, 10.65], [4.9526, 9.36], [5.2641, 8.03], [5.4578, 7.14], [5.617, 6.0699997], [5.717, 5.2799997], [
            5.7864, 4.5899997], [5.8352, 4.06], [5.8781, 3.4299998], [5.9053, 3.06], [5.9278, 2.74], [5.9467, 2.48], [
             5.9626, 2.1599998], [5.9759, 1.93], [5.9861, 1.7299999], [5.993, 1.5799999]],
        [[1.4263, 42.98], [1.6213, 45.739998], [1.8169, 48.1], [2.007, 49.94], [2.1854, 51.859997], [2.3619,
                                                                                                     53.129997], [
             2.5513, 54.41], [2.7364, 56.05], [2.9219, 57.28], [3.1132, 58.269997], [3.2937, 59.14], [3.4827,
                                                                                                      59.769997], [
             3.6956, 60.199997], [3.9271, 60.28], [4.1868, 60.469997], [4.5402, 60.37]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(0, 70, 10)])
    # plt.title("Efficiency and Accuracy Plot of MobileNet On TinyImage", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)
    plt.legend(["Clean Model-Clean Data", "5% Poisoned Model-Poisoned Data", "5% Poison Model-Clean Data",
                "10% Poisoned Model-Poisoned Data", "10% Poisoned Model-Clean Data"], fontsize=13)

    plt.savefig('./result/figure/efficiency/mobilenet_tinyImage_efficiency_accuracy.png', dpi=2000, bbox_inches='tight')


def test():
    data = [
        [[1.0006, 69.409996], [1.0056, 69.59], [1.0224, 69.97], [1.0634, 70.79], [1.1291, 71.909996],
         [1.2101, 73.659996], [1.3197, 76.02], [1.4508, 78.33], [1.5922, 80.74], [1.7356, 82.84], [1.9062, 85.049995],
         [2.0917, 87.079994], [2.2978, 88.72], [2.5525, 90.079994], [2.857, 91.299995], [3.2867, 92.439995]],
        [[1.087, 47.579998], [1.5845, 52.73], [2.4507, 60.109997], [3.4038, 66.84], [4.2703, 72.21], [4.9825, 75.95],
         [5.5349, 78.31], [5.9486, 79.67], [6.2463, 80.439995], [6.4949, 80.89], [6.6683, 81.06], [6.8079, 81.21],
         [6.8872, 81.24], [6.9455, 81.299995], [6.9773, 81.299995], [6.9912, 81.29]],
        [[1.0044, 65.34], [1.0376, 65.96], [1.1134, 67.5], [1.2303, 69.88], [1.3751, 72.61], [1.5394, 75.43],
         [1.7174, 78.369995], [1.9025, 80.979996], [2.0904, 83.409996], [2.2826, 85.45], [2.485, 86.96],
         [2.6935, 88.71], [2.9093, 90.03], [3.1517, 91.159996], [3.4301, 92.07], [3.8107, 92.659996]]

    ]

    # 绘图
    # 绘图
    for idx, pair in enumerate(data):
        x_data = []
        y_data = []
        for x, y in pair:
            x_data.append(x)
            y_data.append(y)

        # 根据索引选择点类型
        if idx == 0:
            marker = 'o'  # 圆圈
        elif idx == 1:
            marker = 's'  # 正方形
        elif idx == 2:
            marker = 'd'  # 菱形
        elif idx == 3:
            marker = '^'  # 上三角形
        elif idx == 4:
            marker = 'x'  # X
        else:
            marker = '*'  # 星号
        plt.scatter(x_data, y_data, marker=marker, label=f'Data {idx + 1}')
        plt.plot(x_data, y_data)

    # 设置标题和标签
    plt.yticks([i for i in range(0, 100, 10)])
    # plt.title("Efficiency and Accuracy Plot of MobileNet On TinyImage", size=18)
    plt.xlabel('Computational FLOPs', size=20)
    plt.ylabel('Accuracy %', size=20)
    plt.tick_params(labelsize=20)
    plt.legend(["Clean Model-Clean Data", "5% Poisoned Model-Poisoned Data", "5% Poison Model-Clean Data"], fontsize=13)

    plt.show()

# vgg_cifar_eff_acc()
# resnet_cifar_eff_acc()
# mobilenet_cifar_eff_acc()

# vgg_tinyimage_eff_acc()
# resnet_tinyimage_eff_acc()
# mobile_tinyimage_eff_acc()
# test()
